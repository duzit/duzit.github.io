(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{476:function(t,a,s){"use strict";s.r(a);var r=s(44),h=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue-router-路由模式和实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-路由模式和实现原理"}},[t._v("#")]),t._v(" Vue Router 路由模式和实现原理")]),t._v(" "),s("ul",[s("li",[t._v("hash history abstract")])]),t._v(" "),s("h2",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" hash")]),t._v(" "),s("ul",[s("li",[t._v("使用 URL hash 值来做路由，支持所有浏览器")])]),t._v(" "),s("h3",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("ul",[s("li",[t._v("基于 "),s("code",[t._v("location.hash")]),t._v(" 来实现，"),s("code",[t._v("location.hash")]),t._v("的值是 URL 中 "),s("code",[t._v("#")]),t._v(" 后面的内容")])]),t._v(" "),s("h3",{attrs:{id:"特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("hash 值只是客户端一种状态，hash值不会被发送到服务器")])]),t._v(" "),s("li",[s("p",[t._v("hash 值的改变会在浏览器的访问历史中增加一条记录，可以通过浏览器的回退，前进按钮控制 hash 切换")])]),t._v(" "),s("li",[s("p",[t._v("可以使用 hashchange 事件监听 hash 值的变化")])])]),t._v(" "),s("h2",{attrs:{id:"history"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" history")]),t._v(" "),s("ul",[s("li",[t._v("依赖 HTML5 History API 和 服务器配置")])]),t._v(" "),s("h3",{attrs:{id:"实现原理-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理-2"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("ul",[s("li",[t._v("HTML5 提供 History API 来实现 URL 的变化，\n主要的 API 有 "),s("code",[t._v("history.pushState()")]),t._v("(新增一个历史记录) 和 "),s("code",[t._v("history.replaceState()")]),t._v("(替换当前的历史记录)，可以在不刷新的情况下操作浏览器的历史记录")])]),t._v(" "),s("h3",{attrs:{id:"特性-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性-2"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("pushState 和 repalceState 两个 API 来操作实现 URL 的变化")])]),t._v(" "),s("li",[s("p",[t._v("我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）")])]),t._v(" "),s("li",[s("p",[t._v("history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）")])])]),t._v(" "),s("h2",{attrs:{id:"abstract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" abstract")]),t._v(" "),s("ul",[s("li",[t._v("支持所有 JS 运行环境，包括 Node.js 服务器端，如果发现没有浏览器的 API ，路由会自动强制进入这个模式")])])])}),[],!1,null,null,null);a.default=h.exports}}]);