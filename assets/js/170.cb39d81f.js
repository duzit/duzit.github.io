(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{550:function(s,a,t){"use strict";t.r(a);var n=t(44),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"原始数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[s._v("#")]),s._v(" 原始数据类型")]),s._v(" "),t("ul",[t("li",[s._v("布尔(boolean) 数值(number) 字符串(string) null undefined Symbol Bigint")])]),s._v(" "),t("h2",{attrs:{id:"布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[s._v("#")]),s._v(" 布尔值")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("使用 "),t("code",[s._v("boolean")]),s._v(" 定义布尔值类型")])]),s._v(" "),t("li",[t("p",[s._v("使用构造函数 "),t("code",[s._v("Boolean")]),s._v(" 创造的对象不是布尔值")])])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义布尔类型的值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" isDone"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用构造函数 Boolean 创造的对象不是布尔值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// new Boolean 实际返回一个对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// const isBool: boolean = new Boolean(1); // Type 'Boolean' is not assignable to type 'boolean'.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 直接调用 boolean 可以返回一个 boolean 类型的值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" isAdd"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" isAdd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// boolean")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h2",{attrs:{id:"number"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[s._v("#")]),s._v(" number")]),s._v(" "),t("ul",[t("li",[s._v("使用 "),t("code",[s._v("number")]),s._v(" 定义数值类型")])]),s._v(" "),t("h2",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" string")]),s._v(" "),t("ul",[t("li",[s._v("使用 "),t("code",[s._v("string")]),s._v(" 定义字符串类型")])]),s._v(" "),t("h2",{attrs:{id:"空值-void"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空值-void"}},[s._v("#")]),s._v(" 空值 (Void)")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("可以表示没有任何返回值的函数")])]),s._v(" "),t("li",[t("p",[s._v("使用 void 声明的变量，只能赋值为 undefined 和 null")])])]),s._v(" "),t("h2",{attrs:{id:"null-和-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[s._v("#")]),s._v(" Null 和 Undefined")]),s._v(" "),t("ul",[t("li",[s._v("与 void 的区别，undefined 和 null 是所有类型的子类型，可以赋值给 number 类型")])]),s._v(" "),t("h2",{attrs:{id:"任意值-any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任意值-any"}},[s._v("#")]),s._v(" 任意值 （any）")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值")])]),s._v(" "),t("li",[t("p",[s._v("变量在声明时（未赋值）如未指定其类型，则为任意值类型")])])]),s._v(" "),t("h2",{attrs:{id:"类型推论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型推论"}},[s._v("#")]),s._v(" 类型推论")]),s._v(" "),t("ul",[t("li",[s._v("没有明确指定类型的时候推测出一个类型（定义变量时已经赋值）")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 类型推论")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" user "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),s._v("\nuser "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不能将类型 number 分配给类型 string ")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);